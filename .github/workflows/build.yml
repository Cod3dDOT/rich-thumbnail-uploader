# Based on the template in https://github.com/FedericoPonzi/rust-ci
name: Build binaries

on:
  push:
    branches:
      - main
    tags:
      - "*"
  workflow_dispatch:

jobs:
  check-client-id:
    name: Check if imgur client id secret exists
    runs-on: ubuntu-latest
    env:
      IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
    steps:
      - name: A/B Check
        if: ${{ env.IMGUR_CLIENT_ID == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('IMGUR_CLIENT_ID secret not set!')

  style:
    name: Check Style
    needs: [check-client-id]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: cargo fmt -- --check
        run: cargo fmt --all -- --check

  build:
    name: Build binary
    needs: [style]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu]
    outputs:
      target: ${{ steps.set-output.outputs.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Build target (release)
        id: build
        uses: houseabsolute/actions-rust-cross@v1
        with:
          target: ${{ matrix.target }}
          args: "--release --locked"
        env:
          IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}

      - name: Save target info
        id: set-output
        run: echo "target=${{ matrix.target }}" >> $GITHUB_OUTPUT

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: rich-thumbnail-uploader.exe
          path: target/${{ matrix.target }}/release/rich-thumbnail-uploader.exe

  test-binary:
    name: Run integration tests on Windows binary
    needs: [build]
    runs-on: windows-latest
    steps:
      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: rich-thumbnail-uploader.exe
          path: bin

      - name: Download 800x800 test image from picsum.photos
        shell: bash
        run: |
          curl -L -o original.jpg https://picsum.photos/800/800

      - name: Convert to PNG
        shell: bash
        run: magick convert original.jpg test.png

      - name: Compute hash of PNG
        id: hash
        shell: bash
        run: echo "hash=$(sha256sum test.png | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Test Imgur upload
        shell: bash
        continue-on-error: true
        id: imgur
        run: |
            echo "Starting Imgur upload test..."

            output=$(echo test.png | ./bin/rich-thumbnail-uploader.exe -d 256 -s imgur -f png)
            exit_code=$?

            echo "Output URL: $output"

            if [[ $exit_code -ne 0 ]]; then
                echo "Imgur uploader exited with non-zero status: $exit_code"
                exit 1
            fi

            if ! [[ "$output" =~ ^https?:// ]]; then
                echo "Output is not a valid URL: $output"
                exit 1
            fi

            echo "Imgur upload test passed."

      - name: Test Catbox (raw PNG, hash check)
        shell: bash
        id: catbox
        continue-on-error: true
        run: |
            echo "Catbox raw upload test..."

            output=$(echo test.png | ./bin/rich-thumbnail-uploader.exe -s catbox)
            exit_code=$?

            echo "Output URL: $output"

            if [[ $exit_code -ne 0 ]]; then
                echo "Program exited with non-zero status: $exit_code"
                exit 1
            fi

            # Check if output is a valid URL
            if ! [[ "$output" =~ ^https?:// ]]; then
                echo "Output is not a valid URL: $output"
                exit 1
            fi

            # Download the uploaded image
            echo "Downloading uploaded image..."
            curl -sL -o downloaded.png "$output"

            # Compute hash of downloaded image
            new_hash=$(sha256sum downloaded.png | cut -d' ' -f1)

            echo "Original hash:    ${{ steps.hash.outputs.hash }}"
            echo "Downloaded hash:  $new_hash"

            if [[ "$new_hash" != "${{ steps.hash.outputs.hash }}" ]]; then
                echo "Hash mismatch!"
                exit 1
            fi

            echo "Catbox upload test passed. Hashes match."

      - name: Fail if any test failed
        shell: bash
        run: |
            echo "Checking test results..."
            imgur_exit=${{ steps.imgur.outputs.exit_code }}
            catbox_exit=${{ steps.catbox.outputs.exit_code }}

            echo "Imgur test exit code: $imgur_exit"
            echo "Catbox test exit code: $catbox_exit"

            if [[ "$imgur_exit" != "0" || "$catbox_exit" != "0" ]]; then
                echo "One or more tests failed."
                exit 1
            fi

            echo "All tests passed."


  create-release:
    name: Publish Release
    needs: [test-binary]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-gnu]
    steps:
      - uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: rich-thumbnail-uploader.exe
          path: ./bin

      - name: Run UPX to reduce binary size
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: "./bin/rich-thumbnail-uploader.exe"
          args: -q --best --lzma

      - name: Publish GitHub Release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: rich-thumbnail-uploader.exe
          changes-file: CHANGES.md
          target: ${{ matrix.target }}
